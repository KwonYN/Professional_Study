// (중상) [모의P-0001] 잠자는 사이에
/*
	1. 트리의 조건을 물어봄과 동시에
	   문제의 상황에서 단 하나의 간선을 이용하여 트리가 망가졌을 때,
	   어떤 식으로 트리의 조건에 위배되는지를 물어보는(?) 문제였음!
	2. 트리의 조건
		1) 사이클 없음
		2) N개 노드의 트리의 간선은 N-1개
		3) 루트 노드는 하나
		4) 망가졌을 때?
			4-1) 전체 사이클 : 하나 밖에 없는 리프노트 -> 루트노드
				=> indegree[전체 노드들] == 1
			4-2) 부분 사이클 : 그 외(루트 노드가 아닌 노드) -> 다른 노드
				=> indegree[node] == 2인 node 하나와
				   루트노드(indegree == 0),
				   그리고 indegree == 1인 나머지 노드
	3. output에서 의도한 바
	=> 만약 indegree[node] == 2인 점이 있다면, (부분 순환) 
		그 node의 부모 2개 중 하나가 답일 것.
	=> 그렇지 않다면, 전체 N개 노드가 모두 순환(사이클) 안에 포함된 것이므로
		가장 마지막에 주어진 간선을 출력해주면 됨
	4. 처음에는 전체 순환이 가능한 케이스를 제대로 생각해주지 못했음.
	   무조건 indegree[] == 2인 경우가 나올 것이라고 생각해서
	   자꾸 몇 개의 케이스만 틀리는 경우가 생겼음!
*/
#if 01
#pragma warning(disable: 4996)
#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
#define NMAX	(30000)

int T, N;
int parent[NMAX + 5], indegree[NMAX + 5], outdegree[NMAX + 5];
pair<int, int> edges[NMAX + 5];
vector<int> result_idx[NMAX + 5];
int two_parent_node, cir_node_idx;

void init() {
	two_parent_node = cir_node_idx = 0;
	for (int i = 1; i <= N; i++) {
		parent[i] = i;
		indegree[i] = 0;
		outdegree[i] = 0;
		result_idx[i].clear();
	}
}

int find(int v) {
	if (v == parent[v]) return v;
	return parent[v] = find(parent[v]);
}

void _ally_(int v1, int v2) { // v1(parent) -> v2(child)
							  // child가 parent 바라봄!!
	v1 = find(v1);
	v2 = find(v2);
	parent[v2] = v1;
}

void input_operation() {
	int s, e;
	scanf("%d", &N);
	init();
	for (int i = 0; i < N; i++) {
		scanf("%d %d", &s, &e);
		edges[i] = { s, e };
		if (++indegree[e] > 1) {
			two_parent_node = e;
		}
		outdegree[s]++;
		result_idx[e].push_back(s);
		if (find(s) != find(e)) _ally_(s, e);
		else {	// 순환 발생
			cir_node_idx = i;
		}
	}
}

bool find_circulation(int start_node, int cir_node) {
	queue<int> que;
	que.push(start_node);
	while (!que.empty()) {
		int node = que.front();		que.pop();
		for (int next : result_idx[node]) {
			if (next == cir_node) return true;
			que.push(next);
		}
	}
	return false;
}

void output(int tc) {
	bool end_flag = true;
	printf("#%d ", tc);
	if (two_parent_node) {
		for (int idx = result_idx[two_parent_node].size() - 1; idx >= 0; idx--) {
			if (find_circulation(result_idx[two_parent_node][idx], two_parent_node)) {
				end_flag = false;
				printf("%d %d\n", result_idx[two_parent_node][idx], two_parent_node);
				break;
			}
		}
		if (end_flag) {
			for (int idx = result_idx[two_parent_node].size() - 1; idx >= 0; idx--) {
				if (indegree[result_idx[two_parent_node][idx]] == 0
					&& outdegree[result_idx[two_parent_node][idx]] <= 1) {
					continue;
				}
				printf("%d %d\n", result_idx[two_parent_node][idx], two_parent_node);
				break;
			}
		}
	}
	else {
		printf("%d %d\n", edges[cir_node_idx].first, edges[cir_node_idx].second);
	}
}

int main() {
	freopen("in.txt", "r", stdin);
	scanf("%d", &T);
	for (int tc = 1; tc <= T; tc++) {
		input_operation();
		output(tc);
	}
	return 0;
}
#endif
// 필요없는 것 다 쳐내보자!
#if 01
#pragma warning(disable: 4996)
#include <cstdio>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;
#define NMAX	(30000)

int T, N;
int indegree[NMAX + 5], outdegree[NMAX + 5];
int two_parent_node;
pair<int, int> edges[NMAX + 5];
vector<int> result_idx[NMAX + 5];

void init() {
	two_parent_node = 0;
	for (int i = 1; i <= N; i++) {
		indegree[i] = 0;
		outdegree[i] = 0;
		result_idx[i].clear();
	}
}

void input_operation() {
	int s, e;
	scanf("%d", &N);
	init();
	for (int i = 0; i < N; i++) {
		scanf("%d %d", &s, &e);
		edges[i] = { s, e };
		if (++indegree[e] > 1) {
			two_parent_node = e;
		}
		outdegree[s]++;
		result_idx[e].push_back(s);
	}
}

bool find_circulation(int start_node, int cir_node) {
	queue<int> que;
	que.push(start_node);
	while (!que.empty()) {
		int node = que.front();		que.pop();
		for (int next : result_idx[node]) {
			if (next == cir_node) return true;
			que.push(next);
		}
	}
	return false;
}

void output(int tc) {
	bool end_flag = true;
	printf("#%d ", tc);
	if (two_parent_node) {
		for (int idx = result_idx[two_parent_node].size() - 1; idx >= 0; idx--) {
			if (find_circulation(result_idx[two_parent_node][idx], two_parent_node)) {
				end_flag = false;
				printf("%d %d\n", result_idx[two_parent_node][idx], two_parent_node);
				break;
			}
		}
		if (end_flag) {
			for (int idx = result_idx[two_parent_node].size() - 1; idx >= 0; idx--) {
				if (indegree[result_idx[two_parent_node][idx]] == 0
					&& outdegree[result_idx[two_parent_node][idx]] <= 1) {
					continue;
				}
				printf("%d %d\n", result_idx[two_parent_node][idx], two_parent_node);
				break;
			}
		}
	}
	else {
		printf("%d %d\n", edges[N-1].first, edges[N-1].second);
	}
}

int main() {
	freopen("in.txt", "r", stdin);
	scanf("%d", &T);
	for (int tc = 1; tc <= T; tc++) {
		input_operation();
		output(tc);
	}
	return 0;
}
#endif