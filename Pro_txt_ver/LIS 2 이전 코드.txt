#include <cstdio>
#include <algorithm>
using namespace std;
#define NMAX	(300000)

int T, N;
int A[NMAX+5], D[NMAX+5], P[NMAX+5];
int BIN[NMAX+5];
int len;

int bin_search(int s, int e, int target) {
	int m = (s + e) / 2;

	while (s <= e) {
		m = (s + e) / 2;
		if (BIN[m] == target) return m;
		if (BIN[m] > target) e = m - 1;
		else s = m + 1;
	}
	return s;
}

int main()
{
	scanf("%d", &T);
	for (int tc = 1; tc <= T; tc++) {
		int max = 0;
		BIN[0] = 0x80000000;
		len = 0;
		scanf("%d", &N);
		for (int i = 1; i <= N; i++) {
			scanf("%d", &A[i]);

			// 1) O(N^2)의 방법!
			/*
			D[i] = 1;	P[i] = -1;
			for (int j = i - 1; j >= 1; j--) {
				if (A[j] < A[i]) {
					if (D[i] < D[j] + 1) {
						D[i] = D[j] + 1;
						P[i] = j;
						if(max < D[i]) max = D[i];
					}
				}
			}
			*/

			int idx;
			// 2) N logN의 방법! : 또 다른 배열 + 바이너리 서치 필요
			if (BIN[len] < A[i]) {
				BIN[++len] = A[i];
				D[i] = len;
			}
			else {
				idx = bin_search(1, len, A[i]);
				D[i] = idx;
				BIN[idx] = A[i];
			}
		}
		printf("#%d %d\n", tc, len);
	}
	return 0;
}