// (중상) [교육P-0032] 패닉룸 2 
/*
	일반적인 다익스트라 문제
	하지만 시간초과를 해결해야 했음!!
	=> 왜 시간초과?
		: 우선 qp(이 문제에서는 min_heap)를 사용하는 이유는
		최소값, 즉 최소 패닉의 합( .top() )을 뽑아내어 사방으로 진행시킴으로써
		(N, M)에 도착했을 때의 최소 패닉 합을 구해주기 위함!
		( 특히 min_heap이므로 (N, M)에 처음으로 도착했을 때가 원하는 답임이 보장됨! )
		하지만 패닉들의 합을 pq에 넣어주지 않고 좌표만 넣어주었던 것...
		그러니 더 많이(?) 도는 문제 발생...

	=> 그렇다면 어떻게 시간초과 해결?
		: pq에 push해주는 값을 좌표뿐만 아니라
		그 노드에 도달하기까지의 최소 누적 패닉합까지 해주었음
*/
#if 0
#pragma warning(disable: 4996)
#include <cstdio>
#include <queue>
#include <vector>
#include <algorithm>
using namespace std;
#define NMMAX	(500)
#define INF		(0x7fffffff)

typedef pair<int, pair<int, int>> pipii;	// typedef pair<int, int> pii;
int T, N, M;
int map[NMMAX+5][NMMAX+5], dijk[NMMAX+5][NMMAX+5];
int dy[4] = { -1, 1, 0, 0 }, dx[4] = { 0, 0, -1, 1 };

void input_init() {
	scanf("%d %d", &N, &M);
	for (int i = 1; i <= N; i++) {
		for (int j = 1; j <= M; j++) {
			scanf("%d", &map[i][j]);
			dijk[i][j] = INF;
		}
	}
	for (int i = 0; i <= N + 1; i++) map[i][0] = map[i][M+1] = -1;
	for (int i = 0; i <= M + 1; i++) map[0][i] = map[N+1][i] = -1;
}

void get_panic() {
	priority_queue<pipii, vector<pipii>, greater<pipii>> pq;
	int y, x, ny, nx;
	pq.push({ map[1][1], { 1, 1 } });	dijk[1][1] = map[1][1];
	while (!pq.empty()) {
		pipii node = pq.top();		pq.pop();
		y = node.second.first;		x = node.second.second;
		if (node.first > dijk[y][x]) continue;
		if (y == N && x == M) return;
		for (int d = 0; d < 4; d++) {
			ny = y + dy[d];			nx = x + dx[d];
			if (map[ny][nx] == -1) continue;
			if (dijk[ny][nx] > dijk[y][x] + map[ny][nx]) {
				dijk[ny][nx] = dijk[y][x] + map[ny][nx];
				pq.push({ dijk[ny][nx], { ny, nx } });
			}
		}
	}
}

void output(int tc) { printf("#%d %d\n", tc, dijk[N][M]); }

int main() {
	freopen("in.txt", "r", stdin);
	scanf("%d", &T);
	for (int tc = 1; tc <= T; tc++) {
		input_init();
		get_panic();
		output(tc);
	}
	return 0;
}
#endif