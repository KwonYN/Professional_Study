// 1
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
 
//10:10-
public class Solution {
 
    static int N;
    static int W;
    static int H;
    static int min;
     
    public static void main(String[] args) throws IOException {
        // TODO Auto-generated method stub
 
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine());
        for(int test =1; test<=T; test++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
             
            N = Integer.parseInt(st.nextToken());
            W = Integer.parseInt(st.nextToken());
            H = Integer.parseInt(st.nextToken());
             
            int[][] map = new int[H][W];
             
            for(int i=0; i<H; i++) {
                st = new StringTokenizer(br.readLine());
                for(int j=0; j<W; j++) {
                    map[i][j] = Integer.parseInt(st.nextToken());
                }
            }
             
            min = Integer.MAX_VALUE;
            pur(0, map);
            System.out.print("#"+String.valueOf(test)+" ");
            System.out.println(min);
        }
    }
     
    public static int getCount(int[][] map) {
        int count = 0;
        for(int j=0; j<W; j++) {
            for(int i=H-1; i>=0; i--) {
                if(map[i][j] == 0)
                    break;
                else
                    count++;
            }
        }
        return count;
    }
     
    public static void pur(int index, int[][] map) {
        if(index == N) {
            int v = getCount(map);
            min = Math.min(v, min);
            return;
        }
         
        for(int j=0; j<W; j++) {
            int[][] nextMap = get(map, j);
            pur(index+1, nextMap);
        }
    }
     
    public static int[][] copy(int[][] map){
        int[][] nextMap =new int[H][W];
        for(int i=0; i<H; i++) {
            for(int j=0; j<W; j++) {
                nextMap[i][j] = map[i][j];
            }
        }
        return nextMap;
    }
     
    public static int[][] get(int[][] map_, int sj){
         
        int[][] nextMap = copy(map_);
        int si = 0;
        while(si<H-1) {
            if(nextMap[si][sj] != 0)
                break;
            si++;
        }
         
        Integer[] init = {si, sj};
        Queue<Integer[]> q = new LinkedList();
        q.add(init);
        int[][] dirs = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
        while(!q.isEmpty()) {
            Integer[] loc = q.poll();
            int i = loc[0];
            int j = loc[1];
             
            int v = nextMap[i][j];
            nextMap[i][j]=0;
             
            for(int len=1; len<v; len++) {
                 
                for(int d=0; d<4; d++) {
                    int ni = i+ (dirs[d][0]*len);
                    int nj = j+ (dirs[d][1]*len);
                    if(ni>=0 && nj>=0 && ni<H && nj <W) {
                        if(nextMap[ni][nj] != 0) {
                            Integer[] nloc = {ni, nj};
                            q.add(nloc);
                        }
                    }
                }
            }
        }
         
        for(int j=0; j<W; j++) {
            Queue<Integer> is = new LinkedList(); 
            for(int i=H-1; i>=0; i--) {
                if(nextMap[i][j] != 0) {
                    is.add(nextMap[i][j]);
                    nextMap[i][j] = 0;
                }
            }
             
            int i = H-1;
            while(!is.isEmpty()) {
                nextMap[i][j] = is.poll();
                i--;
            }
        }
        return nextMap;
    }
}




// 2
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;
 
public class Solution {
    static int[] dy = {0, -1, 0, 1};
    static int[] dx = {1, 0, -1, 0};
    static Queue<int[]> q;
    static int N, W, H, min, cnt;
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
 
        int TC = sc.nextInt();
 
        for (int test_case = 1; test_case <= TC; test_case++) {
            N = sc.nextInt();
            W = sc.nextInt();
            H = sc.nextInt();
            int[][] map = new int[H][W];
            cnt = 0;
            min = 0;
            q = new LinkedList<>();
 
            for (int i = 0; i < H; i++) {
                for (int j = 0; j < W; j++) {
                    map[i][j] = sc.nextInt();
                    if(map[i][j] != 0) cnt++;
                }
            }
 
            for (int i = 0; i < W; i++) {
                go(0, i, 0, map);
            }
 
            int result = cnt - min;
            System.out.println("#" + test_case + " " + result);
        }
    }
 
    private static void go(int idx, int ball, int total, int[][] map) {
        // 이미 모든 벽돌을 깼을 경우 return
        if(total == cnt) {
            min = total;
            return;
        }
        // map 복사 해서 사용
        int[][] clonedMap = new int[H][W];
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                clonedMap[i][j] = map[i][j];
            }
        }
        // 젤 윗부분 찾기
        for (int i = 0; i < H; i++) {
            if(clonedMap[i][ball] != 0) {
                q.offer(new int[]{i, ball, clonedMap[i][ball]});
                break;
            }
        }
        // 떨어뜨리는 위치에서 깰 벽돌이 없는 경우
        if(q.isEmpty()) {
            if(min < total) min = total;
            return;
        }
        // 4방으로 벽돌 깨기
        while(!q.isEmpty()) {
            int curry = q.peek()[0];
            int currx = q.peek()[1];
            int currCnt = q.peek()[2];
            if(clonedMap[curry][currx] != 0) {
                clonedMap[curry][currx] = 0;
                total++;
            }
            q.poll();
            for (int i = 0; i < 4; i++) {   // 4 방향 돌기
                for (int j = 1; j < currCnt; j++) {   // 해당 벽톨이 가진 숫자 만큼 이동
                    int ny = curry + dy[i]*j;
                    int nx = currx + dx[i]*j;
                    if(ny >= 0 && ny < H && nx >= 0 && nx < W) {
                        if (clonedMap[ny][nx] != 0) {
                            if (clonedMap[ny][nx] > 1) q.offer(new int[]{ny, nx, clonedMap[ny][nx]});
                            clonedMap[ny][nx] = 0;
                            total++;
                        }
                    }
                }
            }
            // 벽돌 위치 맞춰주기 
            if(q.isEmpty()) {
                for (int j = 0; j < W; j++) {
                    Stack<Integer> s = new Stack<>();
                    for (int i = 0; i < H; i++) {
                        if(clonedMap[i][j] != 0) {
                            s.push(clonedMap[i][j]);
                        }
                    }
                    for (int i = H - 1; i >= 0; i--) {
                        if(!s.isEmpty()) {
                            clonedMap[i][j] = s.pop();
                        } else {
                            clonedMap[i][j] = 0;
                        }
                    }
                }
            }
        }
        // 시행횟수만큼 반복하기 
        for (int i = 0; i < W; i++) {
            if(idx + 1 < N) {
                go(idx + 1, i, total, clonedMap);
            } else if(idx + 1 == N){
                if(min < total) min = total;
                return;
            }
        }
    }
}