// (중상) [교육P-0035] 이진 탐색 2
/*
	N*logN에 풀 수 있을 것!!
*/
#if 01
#pragma warning(disable: 4996)
#include <cstdio>
#include <algorithm>
using namespace std;
#define NMAX	(100)

int T, len;
char cmp_time[NMAX+5];
int arr[NMAX+5];
int max_time;

void input() {
	scanf("%s", cmp_time);
	len = 0;
    while(cmp_time[len]) {
        arr[len] = 2*len;	// 0, 2, 4, 6, ... , 2*(N-1)
        len++;
    }
}

int bin_search(int s, int e, int target, int sum_time) {
	if(s >= e)  return sum_time + (cmp_time[s] - '0');
	int m = (s+e)/2;
	if(target < arr[m]) bin_search(s, m, target, sum_time + (cmp_time[m] - '0'));
	else if(arr[m] < target) bin_search(m+1, e, target, sum_time + (cmp_time[m] - '0'));
}

void operation() {
	max_time = -1;
	for(int i = 0; i <= len; i++) {
        printf("[%d] 찾자 => %d ", 2*i-1, max_time);
		max_time = max(max_time, bin_search(0, len-1, 2*i-1, 0));
        printf("vs. %d\n", max_time);
	}
}

void output(int tc) { printf("#%d %d\n", tc, max_time); }

int main() {
	scanf("%d", &T);
	for(int tc = 1; tc <= T; tc++) {
		input();
		operation();
		output(tc);
	}	
	return 0;
}
#endif

#pragma warning(disable: 4996)
#include <cstdio>
#include <algorithm>
using namespace std;
#define NMAX	(100)

int T, len;
char cmp_time[NMAX+5];
int arr[NMAX+5];
int max_time;

void input() {
	scanf("%s", cmp_time);
	len = 0;
    while(cmp_time[len]) {
        arr[len] = 2*len;	// 0, 2, 4, 6, ... , 2*(N-1)
        len++;
    }
}

int bin_search(int s, int e, int target, int sum_time) {
	int m = (s+e)/2;
	if(s >= e)  return sum_time + (cmp_time[s] - '0');
    if(target < arr[m]) {
        printf("%d < arr[m] = arr[%d]\n", target, m);
        printf("걸리는 시간 : ");
        for(int i = 0; i <= m; i++) printf("%c ", cmp_time[i]);
        printf("\n");
        printf("정렬된 수   : ");
        for(int i = 0; i <= m; i++) printf("%d ", arr[i]);
        printf("\n");
        printf("▶ sum_time = %d\n\n", sum_time + (cmp_time[m] - '0'));
        bin_search(s, m, target, sum_time + (cmp_time[m] - '0'));
    }
    else if(arr[m] < target) {
        printf("arr[m] = arr[%d] < %d\n", m, target);
        printf("걸리는 시간 : ");
        for(int i = m+1; i <= e; i++) printf("%c ", cmp_time[i]);
        printf("\n");
        printf("정렬된 수   : ");
        for(int i = m+1; i <= e; i++) printf("%d ", arr[i]);
        printf("\n");
        printf("▶ sum_time = %d\n\n", sum_time + (cmp_time[m] - '0'));
        bin_search(m+1, e, target, sum_time + (cmp_time[m] - '0'));
    }
}

void operation() {
	max_time = -1;
	for(int i = 0; i <= len; i++) {
        printf("새로운 시작\n");
		max_time = max(max_time, bin_search(0, len-1, 2*i-1, 0));
	}
}

void output(int tc) { printf("#%d %d\n", tc, max_time); }

int main() {
	scanf("%d", &T);
	for(int tc = 1; tc <= T; tc++) {
		input();
		operation();
		output(tc);
	}	
	return 0;
}