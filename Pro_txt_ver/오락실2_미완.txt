// 오락실2
#if 01
#pragma warning(disable: 4996)
#include <cstdio>
#include <vector>
#include <algorithm>
using namespace std;
#define NMAX	(20010)
#define ROOT	(1)

typedef long long ll;
typedef pair<int, int> pii;
int T, N;
vector<pii> edges[NMAX];
ll dist1[NMAX];	// 'i노드의 자식 노드들 → i노드' 거리(최대)
ll dist2[NMAX];	// 'i노드의 자식 노드가 아닌 노드(부모 노드 && 부모 노드의 다른 자식 노드) → i노드' 거리(최대)
ll dist1_second[NMAX];	// dist1이 최대라면, dist1_second는 두 번째로 큰 시간
int dist1_idx[NMAX];	// dist1이 최대인 자식 노드의 번호 담음

void init() {
	for (int i = 1; i <= N; i++) {
		edges[i].clear();
		dist1[i] = dist2[i] = dist1_second[i] = 0LL;
		dist1_idx[i] = 0;
	}
}

void child_dfs(int node, int parent) {
	for (pii next : edges[node]) {
		int child = next.second;
		int dist = next.first;
		if (child == parent) continue;
		child_dfs(child, parent);
		ll dist_chk = dist1[child] + 1LL*dist;
		if (dist1[node] > dist_chk) {
			dist1_second[node] = dist1[node];
			dist1[node] = dist_chk;
			dist1_idx[node] = child;
		}
		else dist1_second[node] = max(dist1_second[node], dist_chk);
	}
}

void non_child_dfs(int node, int parent) {
	for (pii next : edges[node]) {
		int child = next.second;
		int dist = next.first;
		if (child == parent) continue;
		ll chk1 = max(); // dist1을 최대로 만든 자식쪽으로 내려갈 때
		ll chk2; // 그 외 자식쪽으로 내려갈 때
		if (child == dist1_idx[node]) {
			dist2[child];
		}
		else {
			;
		}
		non_child_dfs(child, node);
	}
}

void input() {
	int a, b, c;
	scanf("%d", &N);
	for (int i = 1; i < N; i++) {
		scanf("%d %d %d", &a, &b, &c);
		edges[a].push_back({ c, b });
		edges[b].push_back({ c, a });
	}
}

void output(int tc) {
	ll dist_min = (1LL<<62);
	int dist_min_cnt = 0;
	for (int i = 1; i <= N; i++) {
		ll dist_chk = dist1[i]+dist2[i];
		if (dist_min > dist_chk) {
			dist_min = dist_chk;
			dist_min_cnt = 1;
		}
		else if (dist_min > dist_chk) dist_min_cnt++;
	}
	printf("#%d %d %lld\n", tc, dist_min_cnt, dist_min);
}

int main() {
	freopen("in.txt", "r", stdin);
	scanf("%d", &T);
	for (int tc = 1; tc <= T; tc++) {
		input();
		child_dfs(ROOT, -1);
		non_child_dfs(ROOT, -1);
		output(tc);
	}
	return 0;
}
#endif