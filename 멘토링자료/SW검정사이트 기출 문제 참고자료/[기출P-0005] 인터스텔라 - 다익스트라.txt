import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
 
public class Solution {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
    static StringTokenizer st;
    static int T, N, M, K, start, end;
    static long c, ANS;
    static ArrayList<Graph>[] adjList;
    static long[][] visited;
    static PriorityQueue<Graph> pq;
     
    static final long INF = Long.MAX_VALUE;
     
    public static void main(String[] args) throws Exception {
        // TODO Auto-generated method stub
        T = Integer.parseInt(br.readLine());
        for (int tc = 1; tc <= T; tc++) {
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken());
            M = Integer.parseInt(st.nextToken());
            K = Integer.parseInt(st.nextToken());
             
            adjList = new ArrayList[N+1];
            for(int i = 1 ; i <= N ; i++) {
                adjList[i] = new ArrayList<>();
            }
            for(int i = 1 ; i <= M ; i++) {
                st = new StringTokenizer(br.readLine());
                start = Integer.parseInt(st.nextToken());
                end = Integer.parseInt(st.nextToken());
                c = Long.parseLong(st.nextToken());
                adjList[start].add(new Graph(end, c, K));
                adjList[end].add(new Graph(start, c, K));
            }
            st = new StringTokenizer(br.readLine());
            start = Integer.parseInt(st.nextToken());
            end = Integer.parseInt(st.nextToken());
             
            dijkstra(start, end);
            bw.write("#"+tc+" "+ANS+"\n");
        }
        bw.flush();
        bw.close();
        br.close();
    }
     
    static void dijkstra(int S, int E) {
        visited = new long[N+1][K+1];
        for(long[] temp : visited) Arrays.fill(temp, INF); 
        visited[S][K] = 0;
        pq = new PriorityQueue<>();
        pq.add(new Graph(S, 0, K));
        ANS = INF;
         
        while(!pq.isEmpty()) {
            Graph cur = pq.poll();
            int curTo = cur.to;
            int curWF = cur.wf;
            if(curTo == E) {
                ANS = visited[curTo][curWF];
                return;
            }
            for(int i = 0 ; i < adjList[curTo].size(); i++) {
                Graph next = adjList[curTo].get(i);
                int nextTo = next.to;
                long nextCost = next.cost;
                int nextWF = curWF - 1;
                if(nextWF >= 0) {
                    if(visited[nextTo][nextWF] > visited[curTo][curWF] + 1) {
                        visited[nextTo][nextWF] = visited[curTo][curWF] + 1;
                        pq.add(new Graph(nextTo, visited[nextTo][nextWF], nextWF));
                    }
                }
                if(visited[nextTo][curWF] > visited[curTo][curWF] + nextCost) {
                    visited[nextTo][curWF] = visited[curTo][curWF] + nextCost;
                    pq.add(new Graph(nextTo, visited[nextTo][curWF], curWF));
                }
            }
        }
    }
     
    static class Graph implements Comparable<Graph>{
        int to;
        long cost;
        int wf;
        public Graph(int to, long cost, int wf) {
            this.to = to;
            this.cost = cost;
            this.wf = wf;
        }
        @Override
        public int compareTo(Graph o) {
            // TODO Auto-generated method stub
            long temp = this.cost - o.cost;
            if(temp > 0) return 1;
            else if(temp < 0) return -1;
            else return 0;
        }
         
    }
}
