import java.util.*;
import java.io.*;
 
class Solution{
    static int N,M,Q;
    static int[] par;
    static int[][] con, qry;
    static char[] ans;
     
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
        int T = Integer.parseInt(br.readLine());
        for(int t=1; t<=T; t++) {
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken()); //나라 수
            M = Integer.parseInt(st.nextToken()); //간선 수
             
            par = new int[N+1]; 
            for(int i=1; i<=N; i++) {
                par[i] = i;
            }
             
            con = new int[M+1][3];
            for(int i=1; i<=M; i++) {
                st = new StringTokenizer(br.readLine());
                int a = Integer.parseInt(st.nextToken());//나라 번호
                int b = Integer.parseInt(st.nextToken());//나라 번호
                 
                con[i][0] = a; //간선 정보 입력
                con[i][1] = b; //간선 정보 입력
                con[i][2] = 0; //간선 끊김 여부               
            }
             
            Q = Integer.parseInt(br.readLine()); //질의 수
            qry = new int[Q+1][3];  
            //int qrycnt=0;
            for(int i=1; i<=Q; i++) {
                st = new StringTokenizer(br.readLine());
                int q = Integer.parseInt(st.nextToken());
                if(q==1) {
                    //간선 끊어짐 미리 체크
                    int k = Integer.parseInt(st.nextToken());
                    qry[i][0] = 1;
                    qry[i][1] = k;
                    con[k][2] = 1; //끊길 정보 미리 입력
                }
                else if(q==2) {
                    //두 나라 같은 연방인지 확인
                    int a = Integer.parseInt(st.nextToken());
                    int b = Integer.parseInt(st.nextToken());
                     
                    qry[i][0] = 2;
                    qry[i][1] = a;
                    qry[i][2] = b;
                    //qrycnt++;
                }
            }
             
            //끊어지지 않을 간선만 먼저 연결
            for(int i=1; i<=M; i++) {
                if(con[i][2]==0) {
                    union(con[i][0], con[i][1]);
                }
            }
             
            //질의 뒤에꺼부터 먼저 수행, 끊어질 간선 연결
            //ans = new char[Q+1];
            //ans[qrycnt] = '\0';
            //int strLen = qrycnt;
            StringBuilder sb = new StringBuilder();
            for(int i=Q; i>0; i--){
                if(qry[i][0] == 2) {
                    if(find(qry[i][1])==find(qry[i][2])) {
                        //ans[--qrycnt] = '1';
                        sb.append("1");
                    }
                    else{
                        //ans[--qrycnt] = '0';
                        sb.append("0");
                    }
                }
                else if(qry[i][0]==1) {
                    //끊어질 간선 연결
                    int k = qry[i][1];
                    if(con[k][2] == 1) {
                        union(con[k][0], con[k][1]);
                    }
                }
            }
             
            //bw.write("#"+t+" "+new String(ans, 0, strLen));
            bw.write("#"+t+" "+sb.reverse());
            bw.newLine();
        }
        bw.flush();     
    }
     
     
    private static void union(int a, int b) {
        par[find(b)] = find(a);
    }
     
     
    private static int find(int a) {
        if(par[a] == a) return a;
        else return par[a] = find(par[a]);
    } 
}
