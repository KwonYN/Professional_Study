import java.io.*;
import java.util.*;
  
public class Solution {
  
    static int T, N, M;
    static ArrayList<Edge> edges = new ArrayList<Edge>();
    static int a, b, c;
    static int par[] = new int[351];
    static int ans;
  
    static class Edge {
  
        int a;
        int b;
        int w;
  
        Edge(int a, int b, int w) {
  
            this.a = a;
            this.b = b;
            this.w = w;
        }
  
    }
  
    public static void main(String args[]) throws Exception {
  
        //System.setIn(new FileInputStream("src/sample.txt"));
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
  
        T = Integer.parseInt(st.nextToken());
  
        for (int tc = 1; tc <= T; tc++) {
  
            st = new StringTokenizer(br.readLine());
            N = Integer.parseInt(st.nextToken()); // 마을 수
  
            st = new StringTokenizer(br.readLine());
            M = Integer.parseInt(st.nextToken()); // 도로 수
  
            edges.clear();
            ans = Integer.MAX_VALUE;
  
            for (int i = 0; i < M; i++) {
                st = new StringTokenizer(br.readLine());
  
                a = Integer.parseInt(st.nextToken());
                b = Integer.parseInt(st.nextToken());
                c = Integer.parseInt(st.nextToken());
  
                edges.add(new Edge(a, b, c));
            }
  
            Collections.sort(edges, new Comparator<Edge>() {
  
                @Override
                public int compare(Edge o1, Edge o2) {
                    // TODO Auto-generated method stub
                    return o1.w - o2.w;
                }
            });
  
            mst();
            System.out.println("#" + tc + " " + ans);
  
        }
    }
  
    static void mst() {
  
        int i;
        int low = -1, high, diff;
        int count = 0;
        Edge e;
  
        while (low < M) {
  
            for (i = 1; i <= N; i++) {
                par[i] = i;
            }
            count = 0;
            for (i = low + 1; i < M; i++) { // 1. 하한을 기준으로 MST 만들기
  
                e = edges.get(i);
  
                if (count == N - 1) {
                    break;
                }
  
                if (find(e.a) == find(e.b)) {
                    continue;
                }
                union(e.a, e.b);
                count++;
            }
            low = i - 1;
            if (count == N - 1) {
  
                for (i = 1; i <= N; i++) {
                    par[i] = i;
                }
                count = 0;
                for (high = low; high >= 0; high--) {
  
                    e = edges.get(high);
  
                    if (count == N - 1) {
                        break;
                    }
  
                    if (find(e.a) == find(e.b)) {
                        continue;
                    }
                    union(e.a, e.b);
                    count++;
                }
  
                if (count == N - 1) {
                    diff = edges.get(low).w - edges.get(high + 1).w;
                    ans = Math.min(ans, diff);
                    low = high + 2;
                }
            } else
                break; // MST 못만들었다 더이상 안해도돼
        }
  
    }
  
    static void union(int a, int b) {
        par[find(a)] = find(b);
    }
  
    static int find(int i) {
        if (par[i] == i)
            return i;
        return par[i] = find(par[i]);
    }
}
