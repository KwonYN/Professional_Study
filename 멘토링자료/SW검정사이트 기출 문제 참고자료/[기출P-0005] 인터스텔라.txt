import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;
 
 
 
 
public class Solution {
 
     static int T;      //테스트케이스의 수
     static int N,M,K;
     static long ans;
      
     static int N_MAX   = 100001;
     static int M_MAX   = 200001;
     static int K_MAX   = 3;
     static long DP_MAX = Long.MAX_VALUE;
      
     static ArrayList<Edge>[] oriArr = new ArrayList[N_MAX];
      
     static int[][] visited = new int[K_MAX][N_MAX];
     static long[][] DP     = new long[K_MAX][N_MAX];
     //
    /**
     * @param args
     */
    public static void main(String[] args) throws Exception{
        // TODO Auto-generated method stub
        BufferedReader  br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter  bw = new BufferedWriter(new OutputStreamWriter(System.out));
        StringTokenizer st;
         
        T = Integer.parseInt(br.readLine());
         
        for(int i=1 ; i<=T ; i++){
             st = new StringTokenizer(br.readLine());
              
             N = Integer.parseInt(st.nextToken()); //행성 수
             M = Integer.parseInt(st.nextToken()); //행성간 길 수 
             K = Integer.parseInt(st.nextToken()); //워프 패킷의 수
 
             initValue();
              
             for(int j=1 ; j<=M; j++){
                 st = new StringTokenizer(br.readLine());
             
                 int nodeA = Integer.parseInt(st.nextToken());
                 int nodeB = Integer.parseInt(st.nextToken());
                 int dist  = Integer.parseInt(st.nextToken());
 
                 if(oriArr[nodeA] == null){
                     oriArr[nodeA] = new ArrayList<Edge>();
                 }
                 if(oriArr[nodeB] == null){
                     oriArr[nodeB] = new ArrayList<Edge>();
                 }
                 oriArr[nodeA].add(new Edge(nodeB, dist));
                 oriArr[nodeB].add(new Edge(nodeA, dist));
             }
              
             st = new StringTokenizer(br.readLine());
                 
             int start = Integer.parseInt(st.nextToken()); 
             int end   = Integer.parseInt(st.nextToken());
 
             process(start, end);
 
             bw.write("#"+i+ " " + ans + "\n");
             bw.flush();
        }       
        bw.close();
        br.close();
    }
     
    public static void initValue(){
        ans = Long.MAX_VALUE;
        Arrays.fill(oriArr, null);
         
        Arrays.fill(visited[0], 0);
        Arrays.fill(visited[1], 0);
        Arrays.fill(visited[2], 0);
         
        Arrays.fill(DP[0], DP_MAX);
        Arrays.fill(DP[1], DP_MAX);
        Arrays.fill(DP[2], DP_MAX);
    }
     
    public static void process(int start, int end){
         
       PriorityQueue<Node> queue = new PriorityQueue<>(10, new Comparator<Node>() {
            @Override
            public int compare(Node o1, Node o2) {
                // TODO Auto-generated method stub
                return o1.cost < o2.cost ? -1 : 1;
            }
       });
        
       
       queue.add(new Node(start, start, K, 0));
       DP[K][start] = 0;
        
       while(!queue.isEmpty()){
           Node curr = queue.poll();
            
           int  parentNode= curr.from;
           int  currNode  = curr.to;
           int  currCard  = curr.card;
            
           if(currNode == end){
               ans = Math.min(ans, DP[currCard][currNode]);
               break;
           }
            
           if(visited[currCard][currNode] > 0){
               continue;
           }
           visited[currCard][currNode] = 1;
            
           for(int i=0 ; i< oriArr[curr.to].size() ; i++){
               Edge next = oriArr[curr.to].get(i);
               int  nextNode  = next.to;
               int  nextCard  = currCard;
                
               if(nextNode == parentNode){
                   continue;
               }
 
               if(DP[nextCard][nextNode] > DP[currCard][currNode] + next.dist){
                   DP[nextCard][nextNode] = DP[currCard][currNode] + next.dist;
                    
                   Node node = new Node(nextNode, currNode, nextCard, DP[nextCard][nextNode]);
                   queue.add(node);
               }
                
               if(nextCard == 0){
                   continue;
               }
                
               nextCard -= 1;
               if(DP[nextCard][nextNode] > DP[currCard][currNode] + 1){
                   DP[nextCard][nextNode] = DP[currCard][currNode] + 1;
                    
                   Node node = new Node(nextNode, currNode, nextCard, DP[nextCard][nextNode]);
                   queue.add(node);
               }
           }
       }
    }
     
    static class Node{
        int to;
        int from;
        int  card;
        long cost;
         
        Node(int to, int from, int card, long cost){
            this.to     = to;
            this.from   = from;
            this.card   = card;
            this.cost   = cost;
        }
    }
     
    static class Edge{
        int to;
        int dist;
 
        Edge(int to, int dist){
            this.to     = to;
            this.dist   = dist;
        }
    }
}
