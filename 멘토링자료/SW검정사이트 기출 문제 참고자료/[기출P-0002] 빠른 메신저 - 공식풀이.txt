/////////////////////////////////////////////////////////
// SDS SW Certificate
// Problem : 빠른 메신저 (Professional)
// Author  : SW Competency Development TF
// Copyright(c) 2016 Samsung SDS Co. ltd.
// All rights reserved. / Confidential
// 본 문서를 SDS 직원이 아닌 외부인에게 공유하거나
// 외부 사이트 등 공중에 게시하는 행위를 절대 금합니다.
/////////////////////////////////////////////////////////
import java.util.Scanner;
import java.util.Arrays;
import java.io.FileInputStream;
 
 
class Solution { 
 
    static int N;
    static int K;
 
    static int[] S;
    static long[] G;
 
    static int[][] A;
    static int[][] B;
 
    static int[][] Prince;
    static int[][] Princess;
 
 
    public static int sign(int x) {
        if (x > 0) { return 1; }
        if (x < 0) { return -1; }
        return 0;
    }
 
    public static int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }
 
    public static int min(int a, int b) {
        if (a > b) {
            return b;
        }
        return a;
    }
 
    public static long min(long a, long b) {
        if (a > b) {
            return b;
        }
        return a;
    }
 
    public static int max(int a, int b) {
        if (a < b) {
            return b;
        }
        return a;
    }
 
    public static long max(long a, long b) {
        if (a < b) {
            return b;
        }
        return a;
    }
 
    public static int find_position(int x) {
        int st = 0;
        int en = K - 1;
        while (st <= en) {
            int mid = (st + en) / 2;
            if (S[mid] == x) {
                return mid;
            } else if (S[mid] > x) {
                en = mid - 1;
            } else {
                st = mid + 1;
            }
        }
        return -1;
    }
 
    public static void relabeling() {
        int M = 0;
 
        S = new int[N + N + 2];
        for (int i = 0; i <= N; i ++) {
            S[M] = A[i][0]; M++;
            S[M] = B[i][0]; M++;
        }
 
        K = 0;
        Arrays.sort(S);
        for (int i = 0; i < M; i ++) {
            while (i < M - 1 && S[i] == S[i+1]) {
                i ++;
            }
            S[K] = S[i];
            K ++;
        }
 
        for (int i = 0; i <= N; i ++) {
            A[i][0] = find_position(A[i][0]);
            B[i][0] = find_position(B[i][0]);
        }
    }
 
    public static long get_result() {
        int center = A[0][0];
        int left = A[0][0];
        int right = A[0][0];
        long time = 1;
        int done;
 
        G = new long[K];
        for (int i = 0; i < K; i ++) {
            G[i] = 2147483647;
            G[i] *= G[i];
        }
        G[center] = time;
 
        for (int i = 1; i <= N; i ++) {
            time += A[i][1];
 
            if (A[i][0] < left) {
                for (int j = A[i][0]; j < left; j ++) {
                    G[j] = time - (S[j] - S[A[i][0]]);
                }
                left = A[i][0];
            } else if (A[i][0] > right) {
                for (int j = A[i][0]; j > right; j --) {
                    G[j] = time - (S[A[i][0]] - S[j]);
                }
                right = A[i][0];
            }
        }
 
        if (center == B[0][0]) {
            return 1;
        }
 
        time = 1;
        for (int i = 1; i <= N; i ++) {
            // See case by case.
 
            done = 0;
            if (abs(B[i][0] - center) > abs(B[i-1][0] - center) && 
                    sign(B[i][0] - center) == sign(B[i-1][0] - center)) {
                // Case 1. Get far
                time += B[i][1];
            } else if (B[i][0] == B[i-1][0]) {
                // Case 2. Not moving
                time += B[i][1];
                if (G[B[i][0]] <= time) {
                    return G[B[i][0]];
                }
            } else if (abs(B[i][0] - center) < abs(B[i-1][0] - center) && 
                    sign(B[i][0] - center) == sign(B[i-1][0] - center)) {
                // Case 3. Get closer
                if (time + B[i][1] >= G[B[i][0]]) {
                    done = 1;
                } else {
                    time += B[i][1];
                }
            } else {
                // Case 4. Cross
                done = 1;
            }
 
            if (done == 1) {
                if (B[i-1][0] > center) {
                    // bigger to smaller
                    for (int j = B[i-1][0]; j > B[i][0]; j --) {
                        int gap = S[j] - S[j-1];
                        if (time + gap + gap < G[j]) {
                            time += gap;
                        } else {
                            return time + max((long)0, (G[j] - time + 1) / 2);
                        }
                    }
                } else {
                    // smaller to bigger
                    for (int j = B[i-1][0]; j < B[i][0]; j ++) {
                        int gap = S[j+1] - S[j];
                        if (time + gap + gap < G[j]) {
                            time += gap;
                        } else {
                            return time + max((long)0, (G[j] - time + 1) / 2);
                        }
                    }
                }
                return time;
            }
        }
        return -1;
    }
 
 
 
 
 
    public static void main(String args[]) throws Exception {
        Scanner sc = new Scanner(System.in);
 
        int T;
        T = sc.nextInt();
 
        for(int test_case = 1; test_case <= T; ++test_case){
            N = sc.nextInt();
 
            Prince = new int[N+1][3];
            Princess = new int[N+1][3];
 
            A = new int[N+1][2];
            B = new int[N+1][2];
 
            for (int i = 0; i <= N; i ++) {
                Prince[i][0] = sc.nextInt();
                Prince[i][1] = sc.nextInt();
            }
 
            for (int i = 0; i <= N; i ++) {
                Princess[i][0] = sc.nextInt();
                Princess[i][1] = sc.nextInt();
            }
 
            Prince[0][2] = Princess[0][2] = 0;
            for (int i = 1; i <= N; i ++) {
                Prince[i][2] = max(abs(Prince[i][0] - Prince[i-1][0]),
                                   abs(Prince[i][1] - Prince[i-1][1]));
                Princess[i][2] = max(abs(Princess[i][0] - Princess[i-1][0]),
                                     abs(Princess[i][1] - Princess[i-1][1]));
            }
 
            for (int i = 0; i <= N; i ++) {
                A[i][0] = Prince[i][0];
                A[i][1] = Prince[i][2];
                B[i][0] = Princess[i][0];
                B[i][1] = Princess[i][2];
            }
            relabeling();
            long result1 = get_result();
 
            for (int i = 0; i <= N; i ++) {
                A[i][0] = Prince[i][1];
                A[i][1] = Prince[i][2];
                B[i][0] = Princess[i][1];
                B[i][1] = Princess[i][2];
            }
            relabeling();
            long result2 = get_result();
 
            long ans;
            if (result1 == -1 && result2 == -1) {
                ans = -1;
            } else if (result1 == -1) {
                ans = result2;
            } else if (result2 == -1) {
                ans = result1;
            } else {
                ans = min(result1, result2);
            }
  
            System.out.println("#" + test_case + " " + ans);
        }
    }
}
