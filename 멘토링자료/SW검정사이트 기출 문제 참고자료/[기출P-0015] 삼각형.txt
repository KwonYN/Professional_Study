import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;
 
public class Solution {
    private static int T, size, query;
    private static long result;
    private static int[][] rect = new int[3002][3002];
    private static int[][] triangle = new int[3002][3002];
    private static StringTokenizer st;
 
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        T = Integer.parseInt(br.readLine().trim());
        for (int test_case = 1; test_case <= T; test_case++) {
            result = 0;
            st = new StringTokenizer(br.readLine());
            size = Integer.parseInt(st.nextToken());
            query = Integer.parseInt(st.nextToken());
            for (int i = 1; i <= size; i++) {
                int temp = 0;
                st = new StringTokenizer(br.readLine());
                for (int j = 1; j <= size; j++) {
                    temp += Integer.parseInt(st.nextToken());
                    rect[i][j] = temp + rect[i - 1][j];
                }
                triangle[size + 1][i] = 0;
            }
            for (int i = size; i > 0; i--) {
                for (int j = 1; j <= size; j++) {
                    triangle[i][j] = (rect[i][j] - rect[i - 1][j]) + triangle[i + 1][j - 1];
                }
            }
 
            for (int i = 0; i < query; i++) {
                st = new StringTokenizer(br.readLine());
                int x = Integer.parseInt(st.nextToken());
                int y = Integer.parseInt(st.nextToken());
                int len = Integer.parseInt(st.nextToken());
                result += triangle[x][y + len - 1] - (rect[x + len - 1][y - 1] - rect[x - 1][y - 1])
                        - triangle[x + len][y - 1];
            }
 
            bw.write("#" + test_case + " " + result + "\n");
        }
        bw.flush();
        bw.close();
    }
}
