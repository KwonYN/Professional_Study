#include <iostream>
#include <algorithm>
#include <vector>
#include <cmath>
#define INF 987654321
using namespace std;
 
long long arr[200001], L0[200001], L1[200001], R0[200001], R1[200001],dp[200001]; // start, end
long long  ans;
int n;
 
     
 
int main() {
    ios::sync_with_stdio(false); cin.tie(0);
    int tc;
    cin>>tc;
    for(int t=1; t<= tc; t++) {
        ans = 0;
        cin>>n;
        for(int i=0; i<n; i++) {
            cin>>arr[i];
        }
         
        // successive maxSum DP
        L0[0] = arr[0];  // left-connected maxSum
        R0[n-1] = arr[n-1];  // right-connected maxSum
         
        L1[0] = arr[0];  // left-connected maxSum without 1 number
        R1[n-1] = arr[n-1];  // right-connected maxSum without 1 number
         
        for(int i=1; i<n; i++) {
             L0[i] = max(arr[i], L0[i-1]+arr[i]);
             L1[i] = max(L1[i-1]+arr[i], L0[i-1] - arr[i-1] +arr[i]);
        }
        for(int i=n-2; i>=0; i--) {
             R0[i] = max(arr[i], R0[i+1]+arr[i]);
             R1[i] = max(R1[i+1]+arr[i], R0[i+1] - arr[i+1] +arr[i]);
        }
         
        // remove one DP
         
         
        // real answer
        for(int i=0; i<n; i++) {
           dp[i] = max(max(L1[i] + R0[i], L0[i] + R1[i]), L0[i]+R0[i]) - arr[i];   
            //dp[i] = max(dp[i], L0[i]+R0[i]-arr[i]);
            if ( dp[i] < 0) dp[i] *= -1;
            ans = (ans + dp[i] % 1000000007) % 1000000007;
        }
         
        printf("#%d %d\n", t, ans);   
    }
     
     
     
 return 0;   
}
