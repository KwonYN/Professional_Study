#include <stdio.h>
#include <vector>
#include <map>
#include <utility>
#include <set>
#define MAX 100010
#define pii(a, b) make_pair(a, b);
 
using namespace std;
 
vector<int> vec[2][MAX];
map<pair<int, int>, int > st[MAX];
pair<int, int> leaf[2][MAX];
int n, m, L, mxlev, cnt[2][MAX];
bool flag;
 
void dfs(int sw, int now, int par, int lev) {
    if (now >= 2 && now <= L) {
        leaf[sw][now] = pii(now, now);
        cnt[sw][now] = 1;
    }
    else {
        leaf[sw][now] = pii(n + 1, 0);
        for (int chd : vec[sw][now]) {
            if (chd == par) continue;
            dfs(sw, chd, now, lev + 1);
            if (leaf[sw][now].first > leaf[sw][chd].first) leaf[sw][now].first = leaf[sw][chd].first;
            if (leaf[sw][now].second < leaf[sw][chd].second) leaf[sw][now].second = leaf[sw][chd].second;
            cnt[sw][now] += cnt[sw][chd];
        }
    }
    if (sw == 0) {
        st[lev][leaf[sw][now]] = cnt[sw][now];
        if (lev > mxlev) mxlev = lev;
    }
}
 
void matching(int now, int par, int lev) {
    for (; lev <= mxlev; lev++) {
        if (st[lev].find(leaf[1][now]) != st[lev].end() && st[lev][leaf[1][now]] == cnt[1][now]) break;
    }
    if (lev > mxlev) {
        flag = true;
        return;
    }
    for (int chd : vec[1][now]) {
        if (chd == par) continue;
        matching(chd, now, lev + 1);
        if (flag) break;
    }
}
 
int main(void) {
    int test, i, a, b;
    scanf("%d", &test);
    for (int T = 1; T <= test; T++) {
        scanf("%d %d %d", &n, &m, &L);
        for (i = 1; i < n; i++) {
            scanf("%d %d", &a, &b);
            vec[0][a].push_back(b);
            vec[0][b].push_back(a);
        }
        for (i = 1; i < m; i++) {
            scanf("%d %d", &a, &b);
            vec[1][a].push_back(b);
            vec[1][b].push_back(a);
        }
 
        dfs(0, 1, 0, 1);
        dfs(1, 1, 0, 1);
        flag = false;
        matching(1, 0, 1);
        printf("#%d %d\n", T, (flag) ? 0 : 1);
        for (i = 1; i <= n; i++) {
            vec[0][i].clear();
            vec[1][i].clear();
            cnt[0][i] = 0, cnt[1][i] = 0;
        }
        for (i = 1; i <= mxlev; i++) st[i].clear();
        mxlev = 0;
    }
    return false;
}
